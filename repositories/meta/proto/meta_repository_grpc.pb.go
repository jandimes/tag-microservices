// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: repositories/meta/proto/meta_repository.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaRepositoryClient is the client API for MetaRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaRepositoryClient interface {
	GetAllSystems(ctx context.Context, in *GetAllSystemsRequest, opts ...grpc.CallOption) (*GetAllSystemsResponse, error)
	SubscribeSystems(ctx context.Context, opts ...grpc.CallOption) (MetaRepository_SubscribeSystemsClient, error)
}

type metaRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaRepositoryClient(cc grpc.ClientConnInterface) MetaRepositoryClient {
	return &metaRepositoryClient{cc}
}

func (c *metaRepositoryClient) GetAllSystems(ctx context.Context, in *GetAllSystemsRequest, opts ...grpc.CallOption) (*GetAllSystemsResponse, error) {
	out := new(GetAllSystemsResponse)
	err := c.cc.Invoke(ctx, "/repositories.meta.proto.MetaRepository/GetAllSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRepositoryClient) SubscribeSystems(ctx context.Context, opts ...grpc.CallOption) (MetaRepository_SubscribeSystemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetaRepository_ServiceDesc.Streams[0], "/repositories.meta.proto.MetaRepository/SubscribeSystems", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaRepositorySubscribeSystemsClient{stream}
	return x, nil
}

type MetaRepository_SubscribeSystemsClient interface {
	Send(*GetAllSystemsRequest) error
	Recv() (*GetAllSystemsResponse, error)
	grpc.ClientStream
}

type metaRepositorySubscribeSystemsClient struct {
	grpc.ClientStream
}

func (x *metaRepositorySubscribeSystemsClient) Send(m *GetAllSystemsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metaRepositorySubscribeSystemsClient) Recv() (*GetAllSystemsResponse, error) {
	m := new(GetAllSystemsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetaRepositoryServer is the server API for MetaRepository service.
// All implementations must embed UnimplementedMetaRepositoryServer
// for forward compatibility
type MetaRepositoryServer interface {
	GetAllSystems(context.Context, *GetAllSystemsRequest) (*GetAllSystemsResponse, error)
	SubscribeSystems(MetaRepository_SubscribeSystemsServer) error
	mustEmbedUnimplementedMetaRepositoryServer()
}

// UnimplementedMetaRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedMetaRepositoryServer struct {
}

func (UnimplementedMetaRepositoryServer) GetAllSystems(context.Context, *GetAllSystemsRequest) (*GetAllSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSystems not implemented")
}
func (UnimplementedMetaRepositoryServer) SubscribeSystems(MetaRepository_SubscribeSystemsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSystems not implemented")
}
func (UnimplementedMetaRepositoryServer) mustEmbedUnimplementedMetaRepositoryServer() {}

// UnsafeMetaRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaRepositoryServer will
// result in compilation errors.
type UnsafeMetaRepositoryServer interface {
	mustEmbedUnimplementedMetaRepositoryServer()
}

func RegisterMetaRepositoryServer(s grpc.ServiceRegistrar, srv MetaRepositoryServer) {
	s.RegisterService(&MetaRepository_ServiceDesc, srv)
}

func _MetaRepository_GetAllSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRepositoryServer).GetAllSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repositories.meta.proto.MetaRepository/GetAllSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRepositoryServer).GetAllSystems(ctx, req.(*GetAllSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRepository_SubscribeSystems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetaRepositoryServer).SubscribeSystems(&metaRepositorySubscribeSystemsServer{stream})
}

type MetaRepository_SubscribeSystemsServer interface {
	Send(*GetAllSystemsResponse) error
	Recv() (*GetAllSystemsRequest, error)
	grpc.ServerStream
}

type metaRepositorySubscribeSystemsServer struct {
	grpc.ServerStream
}

func (x *metaRepositorySubscribeSystemsServer) Send(m *GetAllSystemsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metaRepositorySubscribeSystemsServer) Recv() (*GetAllSystemsRequest, error) {
	m := new(GetAllSystemsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetaRepository_ServiceDesc is the grpc.ServiceDesc for MetaRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repositories.meta.proto.MetaRepository",
	HandlerType: (*MetaRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSystems",
			Handler:    _MetaRepository_GetAllSystems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSystems",
			Handler:       _MetaRepository_SubscribeSystems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "repositories/meta/proto/meta_repository.proto",
}
